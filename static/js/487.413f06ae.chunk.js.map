{"version":3,"file":"static/js/487.413f06ae.chunk.js","mappings":"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","sources":["components/Favorites/Favorites.styled.ts","components/Favorites/Favorites.tsx","components/GameCard/GameCard.styled.ts","components/GameCard/GameCard.tsx","components/Pagination/Pagination.styled.ts","components/Pagination/Pagination.tsx","utils/paginationSliceItems.ts"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const FavoritesSection = styled.section`\r\n  padding: 24px 0;\r\n  @media screen and (max-width: 1170px) {\r\n    padding: 15px 0;\r\n  }\r\n`;\r\n\r\nexport const FavoritesContainer = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 1171px;\r\n  padding: 0 26px;\r\n  @media screen and (max-width: 1170px) {\r\n    max-width: 360px;\r\n    padding: 0 53.5px;\r\n  }\r\n`;\r\n\r\nexport const GamesList = styled.ul`\r\n  display: flex;\r\n  gap: 21px;\r\n  margin-bottom: 30px;\r\n  @media screen and (max-width: 1170px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n","import { useEffect, useState } from \"react\";\r\nimport { PaginationGames } from \"../Pagination/Pagination\";\r\nimport { useAppSelector } from \"../../hooks/redux-hooks\";\r\nimport { GameCard } from \"../GameCard/GameCard\";\r\nimport { paginationSliceItems } from \"../../utils/paginationSliceItems\";\r\nimport * as S from \"./Favorites.styled\";\r\n\r\nconst Favorites = () => {\r\n  const filteredFavorites = useAppSelector((state) => state.games.filteredFavorites);\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n\r\n  const [fromGameItem, toGameItem] = paginationSliceItems(currentPage, filteredFavorites.length)\r\n\r\n  const filteredGames = filteredFavorites.slice(fromGameItem, toGameItem);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1)\r\n  }, [filteredFavorites])\r\n\r\n  if (!filteredFavorites.length) {\r\n    return (\r\n      <S.FavoritesSection>\r\n      <S.FavoritesContainer>\r\n        <p>Games not Found</p>\r\n      </S.FavoritesContainer>\r\n      </S.FavoritesSection>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <S.FavoritesSection>\r\n      <S.FavoritesContainer>\r\n        <S.GamesList>\r\n          {filteredGames.slice(0, 4).map((game) => (\r\n            <GameCard key={game.appId} game={game} />\r\n          ))}\r\n        </S.GamesList>\r\n        {filteredFavorites.length > 4 && (\r\n          <PaginationGames\r\n            currentPage={currentPage}\r\n            setCurrentPage={setCurrentPage}\r\n            items={filteredFavorites}\r\n          />\r\n        )}\r\n      </S.FavoritesContainer>\r\n    </S.FavoritesSection>\r\n  );\r\n};\r\n\r\nexport default Favorites;\r\n","import styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const GameItem = styled.li`\r\n  position: relative;\r\n  width: calc((100% - 54px) / 4);\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 10px;\r\n  @media screen and (max-width: 1170px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const GameLink = styled(Link)``;\r\n\r\nexport const GameImage = styled.img`\r\n  width: 100%;\r\n  height: 99px;\r\n  margin-bottom: 6px;\r\n  object-fit: cover;\r\n  border-radius: 10px;\r\n`;\r\n\r\nexport const GameTitle = styled.h2`\r\n  min-height: 47px;\r\n  margin-left: 11px;\r\n  margin-bottom: 6px;\r\n  font-weight: 400;\r\n  font-size: 18px;\r\n  line-height: calc(22 / 18);\r\n`;\r\n\r\nexport const GameDate = styled.p`\r\n  margin-left: 11px;\r\n  margin-bottom: 5px;\r\n  font-size: 15px;\r\n  line-height: calc(18 / 15);\r\n`;\r\n\r\nexport const GamePrice = styled.p`\r\n  margin-left: 11px;\r\n  margin-bottom: 11px;\r\n  font-size: 14px;\r\n  line-height: calc(17 / 14);\r\n`;\r\n\r\ninterface IconsProps {\r\n  isSelected: boolean;\r\n}\r\n\r\nexport const HeartIcon = styled.svg<IconsProps>`\r\n  position: absolute;\r\n  right: 12.6px;\r\n  bottom: 7.3px;\r\n  width: 25px;\r\n  height: 25px;\r\n  cursor: pointer;\r\n  stroke-width: 3px;\r\n  stroke: ${({ isSelected }) => (isSelected ? \"#DD1717\" : \"#FFFFFF\")};\r\n  fill: ${({ isSelected }) => (isSelected ? \"#DD1717\" : \"transparent\")};\r\n  transition: stroke 200ms cubic-bezier(0.39, 0.575, 0.565, 1),\r\n    fill 200ms cubic-bezier(0.39, 0.575, 0.565, 1);\r\n`;\r\n\r\nexport const PlayIconContainer = styled.div<IconsProps>`\r\n  position: absolute;\r\n  top: 76px;\r\n  right: 17px;\r\n  width: 47px;\r\n  height: 43px;\r\n  visibility: ${({ isSelected }) => (isSelected ? \"visible\" : \"hidden\")};\r\n  opacity: ${({ isSelected }) => (isSelected ? 1 : 0)};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  filter: drop-shadow(0px 4px 4px rgba(0, 0, 0, 0.25));\r\n  cursor: pointer;\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  transition: visibility 200ms cubic-bezier(0.39, 0.575, 0.565, 1),\r\n    opacity 200ms cubic-bezier(0.39, 0.575, 0.565, 1);\r\n`;\r\n\r\nexport const PlayIcon = styled.svg`\r\n  width: 43px;\r\n  height: 43px;\r\n  cursor: pointer;\r\n`;","import { Game } from 'types/types';\r\nimport { useState } from 'react';\r\nimport { useAppDispatch, useAppSelector } from 'hooks/redux-hooks';\r\nimport {\r\n  addGameToFavorites,\r\n  removeGameFromFavorites,\r\n} from 'redux/slises/gamesSlice';\r\nimport sprite from 'assets/icons.svg';\r\nimport * as S from './GameCard.styled';\r\n\r\ninterface GameCardProps {\r\n  game: Game;\r\n}\r\n\r\nconst GameCard = ({ game }: GameCardProps) => {\r\n  const favoriteGames = useAppSelector(state => state.games.favoriteGames);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [isSelected, setIsSelected] = useState(() => {\r\n    const isGameSelected = favoriteGames.find(\r\n      favoriteGame => favoriteGame.appId === game.appId\r\n    );\r\n    if (isGameSelected) {\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  const onClickToggleFavorite: React.MouseEventHandler<SVGSVGElement> = e => {\r\n    e.preventDefault();\r\n    setIsSelected(state => !state);\r\n    if (isSelected) {\r\n      dispatch(removeGameFromFavorites(game.appId));\r\n      return;\r\n    } else {\r\n      dispatch(addGameToFavorites(game));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <S.GameItem>\r\n      <S.GameLink to={`/${game.appId}`}>\r\n        <S.GameImage src={game.imgUrl} alt={game.title} />\r\n        <S.GameTitle>{game.title}</S.GameTitle>\r\n        <S.GameDate>{game.released || 'Unknown'}</S.GameDate>\r\n        <S.GamePrice>{game.price.trim() || 'Unknown'}</S.GamePrice>\r\n        <S.HeartIcon\r\n          isSelected={isSelected}\r\n          onClick={onClickToggleFavorite}\r\n          role=\"button\"\r\n        >\r\n          <use href={`${sprite}#icon-heart`} />\r\n        </S.HeartIcon>\r\n        <S.PlayIconContainer isSelected={isSelected}>\r\n          <S.PlayIcon>\r\n            <use href={`${sprite}#icon-play-circle`} />\r\n          </S.PlayIcon>\r\n        </S.PlayIconContainer>\r\n      </S.GameLink>\r\n    </S.GameItem>\r\n  );\r\n};\r\n\r\nexport { GameCard };\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledPaginateContainer = styled.div`\r\n  .pagination {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    gap: 8px;\r\n  }\r\n  .break-me {\r\n    cursor: default;\r\n  }\r\n  .link {\r\n    min-width: 30px;\r\n    min-height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 5px;\r\n    border-radius: 50%;\r\n    background-color: #5b5e63;\r\n    border: none;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 12px;\r\n    line-height: calc(15 / 12);\r\n  }\r\n  .active {\r\n    background-color: #17323a;\r\n  }\r\n  .previous,\r\n  .next {\r\n    min-width: 30px;\r\n    min-height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 50%;\r\n    background-color: #5b5e63;\r\n  }\r\n`;\r\n\r\nexport const ArrowIcons = styled.svg`\r\n  width: 15px;\r\n  height: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n`","import React from \"react\";\r\nimport Pagination from \"react-js-pagination\";\r\nimport { Game } from \"types/types\";\r\nimport sprite from \"assets/icons.svg\";\r\nimport * as S from \"./Pagination.styled\";\r\n\r\ninterface PaginationProps {\r\n  currentPage: number;\r\n  setCurrentPage: React.Dispatch<React.SetStateAction<number>>;\r\n  items: Array<Game>;\r\n}\r\n\r\nexport const PaginationGames = ({\r\n  currentPage,\r\n  setCurrentPage,\r\n  items,\r\n}: PaginationProps): JSX.Element => {\r\n  return (\r\n    <S.StyledPaginateContainer>\r\n      <Pagination\r\n        activePage={currentPage}\r\n        itemsCountPerPage={4}\r\n        totalItemsCount={items.length}\r\n        pageRangeDisplayed={3}\r\n        innerClass=\"pagination\"\r\n        itemClassPrev=\"previous\"\r\n        itemClassNext=\"next\"\r\n        itemClass=\"link\"\r\n        activeLinkClass=\"active\"\r\n        hideFirstLastPages={true}\r\n        prevPageText={\r\n          <S.ArrowIcons>\r\n            <use href={`${sprite}#icon-arrow-left`} />\r\n          </S.ArrowIcons>\r\n        }\r\n        nextPageText={\r\n          <S.ArrowIcons>\r\n            <use href={`${sprite}#icon-arrow-right`} />\r\n          </S.ArrowIcons>\r\n        }\r\n        onChange={(number: number) => setCurrentPage(number)}\r\n      />\r\n    </S.StyledPaginateContainer>\r\n  );\r\n};\r\n","const ITEMS_PER_PAGE = 4;\r\n\r\nexport const paginationSliceItems = (currentPage: number, length: number) => {\r\n  const fromGameItem = (currentPage - 1) * ITEMS_PER_PAGE;\r\n  const toGameItem =\r\n    currentPage === Math.ceil(length / ITEMS_PER_PAGE)\r\n      ? length\r\n      : currentPage * ITEMS_PER_PAGE;\r\n  return [fromGameItem, toGameItem]\r\n}"],"names":["FavoritesSection","styled","FavoritesContainer","GamesList","filteredFavorites","useAppSelector","state","games","useState","currentPage","setCurrentPage","paginationSliceItems","length","fromGameItem","toGameItem","filteredGames","slice","useEffect","map","game","GameCard","appId","Pagination","items","GameItem","theme","colors","secondary","GameLink","Link","GameImage","GameTitle","GameDate","GamePrice","HeartIcon","isSelected","PlayIconContainer","primary","PlayIcon","favoriteGames","dispatch","useAppDispatch","find","favoriteGame","setIsSelected","to","src","imgUrl","alt","title","released","price","trim","onClick","e","preventDefault","removeGameFromFavorites","addGameToFavorites","role","href","sprite","StyledPaginateContainer","ArrowIcons","PaginationGames","activePage","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","innerClass","itemClassPrev","itemClassNext","itemClass","activeLinkClass","hideFirstLastPages","prevPageText","nextPageText","onChange","number","Math","ceil"],"sourceRoot":""}